version: '3.8'

# All services meant to be run on pi.local domain.

services:

  # https://traefik.io/
  traefik:
    restart: always
    image: "traefik:v2.6"
    container_name: "traefik"
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    labels:
      # https://stackoverflow.com/questions/61572512/expose-traefik-dashboard-to-subdomain
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_FQDN}`)"
      - "traefik.http.routers.dashboard.entrypoints=web"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks: # Allow traefik to view public and private facing applications.
      - internal
      - external

  # https://pi-hole.net/
  # https://github.com/pi-hole/docker-pi-hole/blob/master/docker_run.sh
  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    # Requires 53 to be free, this mandates extra steps on Ubuntu by default
    # https://codepre.com/ubuntu-how-to-release-port-53-used-by-systemd-resolved.html
    # Also requires 53 to be bound to a specific address in order to preserve name resolution in other containers
    # https://discourse.pi-hole.net/t/solve-dns-resolution-in-other-containers-when-using-docker-pihole/31413
    ports:
      - "53:53/tcp"
      - "${INGRESS_IP}:53:53/udp"
    dns:
      - 127.0.0.1
      - 9.9.9.9
    environment:
      # https://github.com/pi-hole/docker-pi-hole#environment-variables
      TZ: "Pacific/Auckland"
      WEBPASSWORD: 'PASSWORD'
      PIHOLE_DNS_: 9.9.9.9;149.112.112.112;1.1.1.1
      DNSSEC: 'true'
      ServerIP: 192.168.0.169 # Actual server IP. Matches DHCP conf file IP
      VIRTUAL_HOST: "${PIHOLE_FQDN}"
      CORS_HOSTS: "${HOMER_FQDN}"
      DNSMASQ_LISTENING: all
      DHCP_ACTIVE: 'true'
      WEBTHEME: default-dark
      PIHOLE_DOMAIN: lan
    volumes:
      - '/services/pihole/pihole:/etc/pihole/'
      - '/services/pihole/dnsmasq.d:/etc/dnsmasq.d/'
    cap_add:
      - NET_ADMIN
    restart: unless-stopped
    networks:
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pihole.rule=Host(`${PIHOLE_FQDN}`)"
      - "traefik.http.services.pihole.loadbalancer.server.port=80"
      - "traefik.http.routers.pihole.entrypoints=web"

  speedtest:
    restart: unless-stopped
    image: lscr.io/linuxserver/librespeed
    container_name: speedtest
    environment:
      PUID: 1000
      PGID: 1000
      TZ: Pacific/Auckland
      PASSWORD: testing123
    expose:
      - 80
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.speedtest.rule=Host(`${SPEEDTEST_FQDN}`)"
      - "traefik.http.routers.speedtest.entrypoints=web"
    networks:
      - internal

  homer:
    restart: unless-stopped
    image: b4bz/homer:latest
    container_name: homer
    volumes:
      - '/compose/homer.yml:/www/assets/config.yml'
    expose:
      - 8080
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homer.rule=Host(`${HOMER_FQDN}`)"
      - "traefik.http.routers.homer.entrypoints=web"
    networks:
      - internal

  radarr:
    restart: unless-stopped
    image: ghcr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Pacific/Auckland
    volumes:
      - radarr_config_volume:/config
      - movies_volume:/movies #optional
      - downloads_volume:/downloads #optional
    expose:
      - 7878
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`${RADARR_FQDN}`)"
      - "traefik.http.routers.radarr.entrypoints=web"
    networks:
      - internal

  sonarr:
    restart: unless-stopped
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Pacific/Auckland
    volumes:
      - sonarr_config_volume:/config
      - tv_volume #optional
      - downloads_volume:/downloads #optional
    expose:
      - 8989
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`${SONARR_FQDN}`)"
      - "traefik.http.routers.sonarr.entrypoints=web"
    networks:
      - internal

  prowlarr:
    restart: unless-stopped
    image: ghcr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Pacific/Auckland
    volumes:
      - prowlarr_config_volume:/config
    expose:
      - 9696
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prowlarr.rule=Host(`${PROWLARR_FQDN}`)"
      - "traefik.http.routers.prowlarr.entrypoints=web"
    networks:
      - internal

  jackett:
    image: lscr.io/linuxserver/jackett
    container_name: jackett
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Pacific/Auckland
      - AUTO_UPDATE=true #optional
    #      - RUN_OPTS=<run options here> #optional
    volumes:
      - jackett_config_volume:/config
      - downloads_volume:/downloads
    expose:
      - 9117
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jackett.rule=Host(`${JACKETT_FQDN}`)"
      - "traefik.http.routers.jackett.entrypoints=web"
    networks:
      - internal


  transmission:
    image: lscr.io/linuxserver/transmission
    container_name: transmission
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Pacific/Auckland
    volumes:
      - transmission_config_volume:/config
      - downloads_volume:/downloads
    expose:
      - 9091 # Web UI port
      - 51413 # Torrent port (TCP)
      - 51413/udp # Torrent port (UDP)
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.transmission.rule=Host(`${TRANSMISSION_FQDN}`)"
      - "traefik.http.routers.transmission.entrypoints=web"
    networks:
      - internal

  node_exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
    networks:
      - internal

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - /compose/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_volume:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prom.rule=Host(`${PROMETHEUS_FQDN}`)"
      - "traefik.http.routers.prom.entrypoints=web"
    expose:
      - 9090
    networks:
      - internal

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
    expose:
      - 3000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`${GRAFANA_FQDN}`)"
      - "traefik.http.routers.grafana.entrypoints=web"
    volumes:
      - grafana_volume:/var/lib/grafana:rw
    networks:
      - internal

  # Gitlab takes a little while to become ready (past the starting phase)
  # Traefik filters out unready pods until the state changes. Ie, won't be immediately resolvable
  gitlab:
    # Default image, does not support arm64
    # https://gitlab.com/groups/gitlab-org/-/epics/2370
    # image: 'gitlab/gitlab-ce:latest'
    # Community ARM build:
    image: yrzr/gitlab-ce-arm64v8:latest
    container_name: 'gitlab'
    restart: always
    hostname: "${GITLAB_FQDN}"
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://${GITLAB_FQDN}'
    volumes:
      - '/services/gitlab/config:/etc/gitlab'
      - '/services/gitlab/logs:/var/log/gitlab'
      - '/services/gitlab/data:/var/opt/gitlab'
    shm_size: '256m'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gitlab.rule=Host(`${GITLAB_FQDN}`)"
      - "traefik.http.services.gitlab.loadbalancer.server.port=80"
      - "traefik.http.routers.gitlab.entrypoints=web"
    expose:
      - 80
    networks:
      - internal

  gitlab-runner:
    image: gitlab/gitlab-runner:latest
    container_name: gitlab-runner
    restart: always
    volumes:
      - /services/gitlab-runner/config:/etc/gitlab-runner
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - internal

  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    privileged: true
    user: root
    expose:
      - 8080
      - 50000
    volumes:
      - /services/jenkins/configuration:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jenkins.rule=Host(`${JENKINS_FQDN}`)"
      - "traefik.http.routers.jenkins.entrypoints=web"
    networks:
      - internal



volumes:
  # Service config volumes
  ## Misc
  prometheus_volume:
  grafana_volume:
  transmission_config_volume:
  # Arr config
  jackett_config_volume:
  radarr_config_volume:
  sonarr_config_volume:
  prowlarr_config_volume:
  # Media volumes
  downloads_volume:
  movies_volume:
  tv_volume:

networks:
  internal:
  external: